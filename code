#include <iostream>
#include <vector>
using namespace std;

const int INF = 1e9;

vector<vector<int>> floydWarshall(int n, const vector<vector<int>>& graph) {
    vector<vector<int>> dist(n, vector<int>(n, INF));

    for (int i = 0; i < n; ++i) {
        dist[i][i] = 0;
        for (int j = 0; j < n; ++j) {
            if (graph[i][j] != -1) {
                dist[i][j] = graph[i][j];
            }
        }
    }

    for (int k = 0; k < n; ++k) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dist[i][k] < INF && dist[k][j] < INF) {
                    dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                }
            }
        }
    }

    return dist;
}

int main() {
    int n, m;
    cin >> n >> m; // Number of vertices and edges
    vector<vector<int>> graph(n, vector<int>(n, -1)); // Initialize with -1

    for (int i = 0; i < m; ++i) {
        int u, v, w;
        cin >> u >> v >> w; // Edge from u to v with weight w
        graph[u][v] = w;
    }

    vector<vector<int>> shortestDistances = floydWarshall(n, graph);

    // Print the shortest distances matrix
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (shortestDistances[i][j] == INF) {
                cout << "INF ";
            } else {
                cout << shortestDistances[i][j] << " ";
            }
        }
        cout << endl;
    }

    return 0;
}
